{"version":3,"file":"static/js/719.a22c1f2a.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactsContainer = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Icon = styled.span`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n\n  background-color: var(--accent-bg-color);\n  color: var(--second-text-color);\n\n  margin-right: 30px;\n  padding: 15px;\n`;\n\nexport const Number = styled.p`\n  font-weight: 700;\n  margin-right: 30px;\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px;\n  border: none;\n  border-radius: 8px;\n\n  background-color: #2b2b2b;\n  color: var(--second-text-color);\n\n  cursor: pointer;\n  transition: background-color var(--main-hover-animation);\n\n  &:hover,\n  &:focus {\n    background-color: var(--accent-bg-color);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/operations/contactsThunk';\nimport { getFilteredContacts } from 'redux/contacts/selectors';\nimport { FaTrash, FaUserAlt } from 'react-icons/fa';\nimport {\n  ContactsContainer,\n  Item,\n  Wrapper,\n  Icon,\n  Number,\n  Button,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getFilteredContacts);\n\n  return (\n    <>\n      <ContactsContainer>\n        {contacts.map(item => (\n          <Item key={item.id}>\n            <Wrapper>\n              <Icon>\n                <FaUserAlt />\n              </Icon>\n              <p>{item.name}</p>\n            </Wrapper>\n\n            <Wrapper>\n              <Number>{item.number}</Number>\n              <Button\n                type=\"button\"\n                onClick={() => dispatch(deleteContactThunk(item.id))}\n              >\n                <FaTrash />\n              </Button>\n            </Wrapper>\n          </Item>\n        ))}\n      </ContactsContainer>\n    </>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  margin-bottom: 50px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n`;\n\nexport const Span = styled.span`\n  font-weight: 600;\n  color: var(--main-text-color);\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  height: 40px;\n  padding: 0 10px 0 10px;\n  border-radius: 8px;\n  border: 1px solid var(--second-bg-color);\n  outline: none;\n\n  color: var(--main-text-color);\n  font-size: 16px;\n\n  &:focus {\n    border-color: var(--accent-bg-color);\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 200px;\n  height: 40px;\n\n  background-color: var(--accent-bg-color);\n  color: var(--second-text-color);\n  font-family: inherit;\n  border: none;\n  border-radius: 8px;\n\n  cursor: pointer;\n  transition: background-color var(--main-hover-animation);\n\n  &:hover,\n  &:focus {\n    background-color: var(--second-bg-color);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n// import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\n// import { Report } from 'notiflix/build/notiflix-report-aio';\nimport { addContactThunk } from 'redux/contacts/operations/contactsThunk';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Form, Label, Span, Input, Button } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  // const [name, setName] = useState('');\n  // const [number, setNumber] = useState('');\n\n  // const onChangeName = e => setName(e.currentTarget.value);\n  // const onChangeNumber = e => setNumber(e.currentTarget.value);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isInContact = contacts.some(\n      contact =>\n        contact.name.toLowerCase() ===\n        e.target.elements.name.value.toLowerCase()\n    );\n    if (isInContact) {\n      Notify.warning(\n        `${e.target.elements.name.value}\n        This user is already in the contact list.`\n      );\n      return;\n    }\n\n    const newObj = {\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n    // if (\n    //   contacts.find(\n    //     contact =>\n    //       contact.name.toLowerCase() ===\n    //       e.target.elements.name.value.toLowerCase()\n    //   )\n    // ) {\n    //   return Notify.warning('This user is already in the contact list.');\n    // }\n\n    dispatch(addContactThunk(newObj));\n\n    e.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        <Span>Name</Span>\n        <Input\n          // onChange={onChangeName}\n          // value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n\n      <Label>\n        <Span>Number</Span>\n        <Input\n          // onChange={onChangeNumber}\n          // value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n\n      <Button type=\"submit\">Add Contact</Button>\n    </Form>\n  );\n};\nContactForm.propType = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 50px;\n`;\n\nexport const Text = styled.p`\n  font-weight: 600;\n  color: var(--main-text-color);\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 40px;\n  padding: 0 10px 0 10px;\n  border: 1px solid var(--second-bg-color);\n  border-radius: 8px;\n  outline: none;\n  color: var(--main-text-color);\n  font-size: 16px;\n\n  &:focus {\n    border-color: var(--accent-bg-color);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Label, Text, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const showFilteredContacts = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <div>\n      <Label>\n        <Text>Find contacts by name</Text>\n        <Input type=\"text\" value={filter} onChange={showFilteredContacts} />\n      </Label>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { getContactsThunk } from 'redux/contacts/operations/contactsThunk';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectLoading = state => state.isLoading;\nexport const selectError = state => state.contacts.error;\n\nconst getFilter = state => state.filter;\nconst getContacts = state => state.contacts.items;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    if (!contacts) return;\n    return contacts.filter(item =>\n      item.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n"],"names":["ContactsContainer","styled","Item","Wrapper","Icon","Number","Button","ContactList","dispatch","useDispatch","contacts","useSelector","getFilteredContacts","map","item","name","number","type","onClick","deleteContactThunk","id","Form","Label","Span","Input","ContactForm","selectContacts","onSubmit","e","preventDefault","some","contact","toLowerCase","target","elements","value","Notify","newObj","addContactThunk","reset","pattern","title","required","propType","PropTypes","Text","Filter","filter","selectFilter","onChange","filterContacts","Tasks","isLoading","selectLoading","useEffect","getContactsThunk","Helmet","state","items","createSelector","trim","includes"],"sourceRoot":""}